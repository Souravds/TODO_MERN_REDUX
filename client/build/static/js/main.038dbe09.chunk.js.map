{"version":3,"sources":["helpers/fetch2.js","reducers/authReducer.js","components/Auth.js","reducers/todoReducer.js","components/Todo.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["fetch2point0","api","body","a","fetch","method","headers","localStorage","getItem","JSON","stringify","res","json","fetch3point0","type","signupUser","createAsyncThunk","result","signinUser","authReducer","createSlice","name","initialState","token","loading","error","reducers","addToken","state","action","logout","removeItem","extraReducers","pending","fulfilled","payload","message","setItem","rejected","actions","Auth","useState","email","setemail","password","setpassword","auth","setauth","dispatch","useDispatch","useSelector","user","console","log","className","placeholder","value","onChange","e","target","style","cursor","onClick","authenticate","class","createtodo","fetchtodos","deltetodo","id","todoReducer","reducer","push","filter","item","_id","Todo","setvalue","todos","useEffect","todo","map","individualtodo","App","store","configureStore","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.038dbe09.chunk.js","sourcesContent":["export const fetch2point0 = async (api, body) => {\r\n    const res = await fetch(api,{\r\n        method: 'post',\r\n        headers:{\r\n            'Content-type': 'application/json',\r\n            'Authorization': localStorage.getItem('token')\r\n        },\r\n        body: JSON.stringify(body)\r\n    })\r\n\r\n    return await res.json()\r\n}\r\n\r\nexport const fetch3point0 = async (api, type) => {\r\n    const res = await fetch(api,{\r\n        method: type,\r\n        headers:{\r\n            'Content-type': 'application/json',\r\n            'Authorization': localStorage.getItem('token')\r\n        }\r\n    })\r\n\r\n    return await res.json()\r\n} \r\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'\r\nimport { fetch2point0 } from '../helpers/fetch2'\r\n\r\n//initial user state \r\nconst initialState = {\r\n    token: '',\r\n    loading: false,\r\n    error: ''\r\n}\r\n\r\n//fetch function to fetch the server response\r\n// ==>Replace in helper section\r\n\r\n//signup action creator\r\nexport const signupUser = createAsyncThunk(\r\n    'signupuser',\r\n    async (body) => {\r\n        const result = await fetch2point0('/signup', body)\r\n        return result\r\n    }   \r\n)\r\n\r\n//signin action creator\r\nexport const signinUser = createAsyncThunk(\r\n    'signinuser',\r\n    async (body) => {\r\n        const result = await fetch2point0('/signin', body)\r\n        return result\r\n    }\r\n)\r\n\r\n//reducer function to check what should change into \"\"user\"\" state\r\nconst authReducer = createSlice({\r\n    name: 'user',\r\n    initialState,\r\n    //reducers are usually set of actions\r\n    reducers:{\r\n        //token fetch from localstorage\r\n        addToken: (state, action) => {\r\n            state.token = localStorage.getItem('token')\r\n        },\r\n        logout: (state, action) => {\r\n            state.token = null\r\n            localStorage.removeItem('token')\r\n        }\r\n    },\r\n    //asyncthunk function should be here\r\n    extraReducers:{\r\n        //OR action destructuring like -> {payload: {error, message}}\r\n        [signupUser.pending]: (state, action) => {\r\n            state.loading = true     \r\n        },\r\n        [signupUser.fulfilled]: (state, action) => {\r\n            state.loading = false\r\n            if (action.payload.error) {\r\n                state.error = action.payload.error\r\n            }else{\r\n                state.error = action.payload.message\r\n                state.token = action.payload.token\r\n            }\r\n        },\r\n        [signinUser.pending]: (state, action) => {\r\n            state.loading = true\r\n        },\r\n        [signinUser.fulfilled]: (state, {payload:{error, token}}) => {\r\n            state.loading = false\r\n            if (error) {\r\n                state.error = error\r\n            } else {\r\n                state.token = token\r\n                //token set to localstorage\r\n                localStorage.setItem('token', token)\r\n            }\r\n        },\r\n        [signinUser.rejected]: (state, action) => {\r\n            state.loading = false\r\n            state.error = 'Try Again Please...'\r\n        }\r\n    }\r\n\r\n})\r\n\r\nexport const { addToken, logout } = authReducer.actions\r\nexport default authReducer.reducer\r\n","import React, { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { signinUser, signupUser } from '../reducers/authReducer'\r\nfunction Auth() {\r\n    const [email, setemail] = useState('')\r\n    const [password, setpassword] = useState('')\r\n    const [auth, setauth] = useState('signin')\r\n\r\n\r\n    const dispatch = useDispatch()\r\n    \r\n    //destructuring the state\r\n    const {error, loading} = useSelector(state => state.user)\r\n    \r\n    //signup and signin process\r\n    const authenticate = (auth) => {\r\n        console.log(auth);\r\n        if(auth === 'signin'){\r\n            dispatch(signinUser({email, password}))\r\n        }else{\r\n            dispatch(signupUser({email, password}))\r\n        }\r\n    }\r\n    console.log(error);\r\n    return (\r\n        <div className=\"container\">\r\n            <h2>Please {auth}</h2>\r\n            <p>{error && error}</p>\r\n            <input type=\"email\" placeholder=\"Enter email...\" value={email} onChange={(e) => setemail(e.target.value)} />\r\n            \r\n            <input type=\"password\" placeholder=\"Enter password...\" value={password} onChange={(e) => setpassword(e.target.value)} />\r\n\r\n            {\r\n                auth === 'signin' ? \r\n                <h6 style={{cursor: 'pointer'}} onClick={() => setauth('signup')}>Don't have an accout?</h6>\r\n                :\r\n                <h6 style={{cursor: 'pointer'}} onClick={() => setauth('signin')}>Already have an accout?</h6>\r\n            }\r\n\r\n            <button onClick={() => authenticate(auth) } className='btn'>{auth}</button>\r\n\r\n            {loading && (\r\n                <div class=\"progress\">\r\n                    <div class=\"indeterminate\"></div>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Auth\r\n","import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\r\nimport { fetch2point0, fetch3point0 } from \"../helpers/fetch2\";\r\n\r\n\r\nconst initialState = []\r\n\r\n//Create todo req to server and response back by createAsyncThunk\r\nexport const createtodo = createAsyncThunk(\r\n    'addtodo',\r\n    async (body) => {\r\n        const result = await fetch2point0('/createtodo', body)\r\n        return result\r\n    }\r\n)\r\n\r\n//Action creator = Fetch todos req to server\r\nexport const fetchtodos = createAsyncThunk(\r\n    'fetchtodos',\r\n    async () => {\r\n        const res = await fetch3point0('/gettodos', 'get')\r\n        return res\r\n    }\r\n)\r\n\r\n//Action creator = Delete todo req to server\r\nexport const deltetodo = createAsyncThunk(\r\n    'deltetodo',\r\n    async (id) => {\r\n        const result = await fetch3point0(`/deletetodo/${id}`, 'delete')\r\n\r\n        return result\r\n    }\r\n)\r\n\r\nconst todoReducer =  createSlice({\r\n    name: 'todo',\r\n    initialState,\r\n    reducer:{\r\n\r\n    },\r\n    extraReducers: {\r\n        [createtodo.fulfilled]: (state, { payload: { message }}) => {\r\n            if ( message )\r\n                state.push(message)\r\n        },\r\n        [fetchtodos.fulfilled]: (state, { payload: {message }}) => {\r\n            // CHANGE THE WHOLE STATE by 'return'   \r\n            return message\r\n        },\r\n        [deltetodo.fulfilled]:(state, { payload: {message }}) => {\r\n            const filterTodos = state.filter( item => item._id !== message._id)\r\n\r\n            //CHANGE THE WHOLE STATE by 'return'\r\n            return filterTodos\r\n        }\r\n    }\r\n})\r\n\r\n\r\nexport default todoReducer.reducer","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { logout } from '../reducers/authReducer';\r\nimport { createtodo, deltetodo, fetchtodos } from '../reducers/todoReducer';\r\n\r\nfunction Todo() {\r\n    //dispatch add todo to server\r\n    const dispatch = useDispatch()\r\n\r\n    //SET THE INPUT\r\n    const [value, setvalue] = useState(' ')\r\n    \r\n    //get todos from state\r\n    const todos = useSelector(state => state.todos)\r\n    \r\n    //WHEN ADD TODO BUTTON FIRED\r\n    const addTodo = () => {\r\n        dispatch(createtodo({todo: value}))\r\n    }\r\n\r\n    //Fetch Ones\r\n    useEffect(() => {\r\n        dispatch(fetchtodos())\r\n    }, [dispatch])\r\n    \r\n    return (\r\n        <div>\r\n            <input type=\"text\" placeholder='Enter todo...' value={value} onChange={(e) => setvalue(e.target.value)}/>\r\n            <button  className='btn' onClick={addTodo}>Add todo</button>\r\n\r\n            {/* Display todos */}\r\n            <ul className=\"collection\">\r\n                {todos.map((individualtodo) => \r\n                    <li style={{ cursor: 'pointer' }} className=\"collection-item\" key={individualtodo._id}\r\n                    onClick={() => dispatch( deltetodo(individualtodo._id))}\r\n                    >\r\n                        {individualtodo.todo}\r\n                    </li>\r\n                )}\r\n                \r\n            </ul>\r\n\r\n            <button className='btn'  onClick={() => { dispatch(logout()) }}>Logout</button>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo\r\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './App.css';\nimport Auth from './components/Auth';\nimport Todo from './components/Todo';\nimport { addToken } from './reducers/authReducer';\n\n\n\nfunction App() {\n  const {token} = useSelector(state => state.user)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(addToken())\n  }, [ dispatch ])\n  \n  return (\n    <div className=\"App\">\n      {token ? <Todo /> : <Auth /> }\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport authReducer from '../reducers/authReducer';\nimport todoReducer from '../reducers/todoReducer';\n\n//store created by configureStore\nexport const store = configureStore({\n  reducer: {\n    user: authReducer,\n    todos: todoReducer\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport { store } from './app/store';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    {/* Provider provides redux store*/}\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}